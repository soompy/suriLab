// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  posts    Post[]
  
  @@map("users")
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  color       String?
  posts       Post[]
  
  @@map("categories")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
  
  @@map("tags")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  excerpt     String
  slug        String   @unique
  publishedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
  readTime    Int?
  views       Int      @default(0)
  featured    Boolean  @default(false)
  isPublished Boolean  @default(false)
  
  // Relations
  tags       Tag[]
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  comments   Comment[]
  likes      Like[]
  
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorName String
  authorEmail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  
  // IP 기반 중복 방지
  ipAddress String
  
  @@unique([postId, ipAddress])
  @@map("likes")
}
